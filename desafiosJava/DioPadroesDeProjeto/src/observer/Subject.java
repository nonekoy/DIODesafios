package observer;

import java.util.ArrayList;
import java.util.List;

/**
 * PADR√ÉO OBSERVER - Padr√£o Comportamental
 * 
 * PROBLEMA:
 * - Objetos precisam ser notificados sobre mudan√ßas de estado
 * - Acoplamento forte entre objeto observado e observadores
 * - Dificuldade em manter sincroniza√ß√£o entre objetos relacionados
 * 
 * SOLU√á√ÉO:
 * - Interface comum para observadores
 * - Mecanismo de inscri√ß√£o e cancelamento
 * - Notifica√ß√£o autom√°tica quando estado muda
 * 
 * EXEMPLOS PR√ÅTICOS:
 * - Sistema de notifica√ß√µes
 * - Eventos de interface gr√°fica
 * - Sistema de mensagens
 * - Monitoramento de recursos
 * 
 * VANTAGENS:
 * + Baixo acoplamento entre objetos
 * + F√°cil adi√ß√£o/remo√ß√£o de observadores
 * + Notifica√ß√£o autom√°tica
 * + Suporte a m√∫ltiplos observadores
 * 
 * DESVANTAGENS:
 * - Pode causar notifica√ß√µes em cascata
 * - Observadores podem n√£o ser notificados na ordem esperada
 * - Pode causar vazamentos de mem√≥ria se n√£o for bem gerenciado
 */
public abstract class Subject {
    
    private List<Observer> observers = new ArrayList<>();
    private String state;
    
    /**
     * Adiciona um observador √† lista
     */
    public void attach(Observer observer) {
        if (!observers.contains(observer)) {
            observers.add(observer);
            System.out.println("üëÅÔ∏è Observador adicionado: " + observer.getName());
        }
    }
    
    /**
     * Remove um observador da lista
     */
    public void detach(Observer observer) {
        if (observers.remove(observer)) {
            System.out.println("üö´ Observador removido: " + observer.getName());
        }
    }
    
    /**
     * Notifica todos os observadores sobre mudan√ßa de estado
     */
    public void notifyObservers() {
        System.out.println("üì¢ Notificando " + observers.size() + " observador(es)...");
        for (Observer observer : observers) {
            observer.update(state);
        }
    }
    
    /**
     * Altera o estado e notifica os observadores
     */
    public void setState(String newState) {
        this.state = newState;
        System.out.println("üîÑ Estado alterado para: " + newState);
        notifyObservers();
    }
    
    /**
     * Obt√©m o estado atual
     */
    public String getState() {
        return state;
    }
    
    /**
     * Obt√©m o n√∫mero de observadores
     */
    public int getObserverCount() {
        return observers.size();
    }
}
