import singleton.Singleton;
import strategy.*;
import facade.BankFacade;
import factory.*;
import observer.*;
import adapter.*;

/**
 * CLASSE PRINCIPAL - Demonstra√ß√£o de Padr√µes de Projeto
 * 
 * Esta classe demonstra a implementa√ß√£o e uso de v√°rios padr√µes de projeto
 * em Java puro, com exemplos pr√°ticos e explica√ß√µes te√≥ricas.
 */
public class Main {
    
    public static void main(String[] args) {
        System.out.println("üöÄ INICIANDO DEMONSTRA√á√ÉO DE PADR√ïES DE PROJETO");
        System.out.println("==================================================");
        System.out.println("üìö Padr√µes implementados:");
        System.out.println("   1. Singleton (Criacional)");
        System.out.println("   2. Strategy (Comportamental)");
        System.out.println("   3. Facade (Estrutural)");
        System.out.println("   4. Factory Method (Criacional)");
        System.out.println("   5. Observer (Comportamental)");
        System.out.println("   6. Adapter (Estrutural)");
        System.out.println("==================================================\n");
        
        // Aguarda um pouco para melhor visualiza√ß√£o
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        // Demonstra√ß√£o dos padr√µes
        demonstrateSingleton();
        demonstrateStrategy();
        demonstrateFacade();
        demonstrateFactoryMethod();
        demonstrateObserver();
        demonstrateAdapter();
        
        System.out.println("\nüéâ DEMONSTRA√á√ÉO CONCLU√çDA!");
        System.out.println("==================================================");
        System.out.println("‚úÖ Todos os padr√µes de projeto foram demonstrados com sucesso!");
        System.out.println("üìñ Verifique os coment√°rios no c√≥digo para entender cada padr√£o");
        System.out.println("üîç Analise a estrutura do projeto para ver a implementa√ß√£o");
    }
    
    /**
     * Demonstra o padr√£o Singleton
     */
    private static void demonstrateSingleton() {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("üîí DEMONSTRANDO PADR√ÉO SINGLETON");
        System.out.println("=".repeat(60));
        
        // Obt√©m a primeira inst√¢ncia
        Singleton instance1 = Singleton.getInstance();
        instance1.doSomething();
        
        // Tenta obter outra inst√¢ncia
        Singleton instance2 = Singleton.getInstance();
        instance2.doSomething();
        
        // Verifica se s√£o a mesma inst√¢ncia
        if (instance1 == instance2) {
            System.out.println("‚úÖ Confirma√ß√£o: Ambas as refer√™ncias apontam para a mesma inst√¢ncia!");
        }
        
        // Demonstra vers√£o thread-safe
        System.out.println("\nüîÑ Testando vers√£o thread-safe...");
        Singleton threadSafeInstance = Singleton.getThreadSafeInstance();
        threadSafeInstance.doSomething();
    }
    
    /**
     * Demonstra o padr√£o Strategy
     */
    private static void demonstrateStrategy() {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("üéØ DEMONSTRANDO PADR√ÉO STRATEGY");
        System.out.println("=".repeat(60));
        
        // Cria estrat√©gias de pagamento
        PaymentStrategy creditCardStrategy = new CreditCardPayment("1234-5678-9012-3456", "Jo√£o Silva", "12/25");
        PaymentStrategy pixStrategy = new PixPayment("joao.silva@email.com", "Jo√£o Silva");
        
        // Cria o processador de pagamento
        PaymentProcessor processor = new PaymentProcessor(creditCardStrategy);
        
        // Processa pagamento com cart√£o de cr√©dito
        processor.processPayment(150.00);
        
        // Troca para estrat√©gia PIX
        processor.setPaymentStrategy(pixStrategy);
        processor.processPayment(75.50);
        
        // Volta para cart√£o de cr√©dito
        processor.setPaymentStrategy(creditCardStrategy);
        processor.processPayment(200.00);
    }
    
    /**
     * Demonstra o padr√£o Facade
     */
    private static void demonstrateFacade() {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("üèóÔ∏è DEMONSTRANDO PADR√ÉO FACADE");
        System.out.println("=".repeat(60));
        
        // Cria o sistema banc√°rio simplificado
        BankFacade bankSystem = new BankFacade("12345-6", "Maria Santos", 1000.00);
        
        // Opera√ß√µes banc√°rias simplificadas
        bankSystem.checkBalance();
        bankSystem.deposit(500.00);
        bankSystem.withdraw(200.00);
        bankSystem.transfer(150.00, "98765-4");
        bankSystem.checkBalance();
        
        // Hist√≥rico de transa√ß√µes
        bankSystem.getTransactionHistory();
    }
    
    /**
     * Demonstra o padr√£o Factory Method
     */
    private static void demonstrateFactoryMethod() {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("üè≠ DEMONSTRANDO PADR√ÉO FACTORY METHOD");
        System.out.println("=".repeat(60));
        
        // Cria f√°bricas para diferentes tipos de documento
        DocumentFactory pdfFactory = new PDFDocumentFactory();
        DocumentFactory wordFactory = new WordDocumentFactory();
        
        // Processa documentos usando as f√°bricas
        pdfFactory.processDocument("Relat√≥rio Anual", "Ana Costa");
        
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        wordFactory.processDocument("Proposta Comercial", "Carlos Lima");
    }
    
    /**
     * Demonstra o padr√£o Observer
     */
    private static void demonstrateObserver() {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("üëÅÔ∏è DEMONSTRANDO PADR√ÉO OBSERVER");
        System.out.println("=".repeat(60));
        
        // Cria a ag√™ncia de not√≠cias (Subject)
        NewsAgency newsAgency = new NewsAgency("TechNews Brasil");
        
        // Cria canais de not√≠cias (Observers)
        NewsChannel channel1 = new NewsChannel("Canal 1", "Geral");
        NewsChannel channel2 = new NewsChannel("Canal 2", "Esportes");
        NewsChannel channel3 = new NewsChannel("Canal 3", "Tecnologia");
        
        // Adiciona observadores √† ag√™ncia
        newsAgency.attach(channel1);
        newsAgency.attach(channel2);
        newsAgency.attach(channel3);
        
        // Publica not√≠cias (muda o estado)
        newsAgency.publishNews("Nova tecnologia revoluciona mercado!");
        
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        newsAgency.publishSportsNews("Sele√ß√£o brasileira vence partida decisiva!");
        
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        newsAgency.publishTechNews("Intelig√™ncia artificial avan√ßa em 2024!");
        
        // Remove um observador
        newsAgency.detach(channel2);
        
        // Publica mais uma not√≠cia
        newsAgency.publishNews("√öltima not√≠cia do dia!");
    }
    
    /**
     * Demonstra o padr√£o Adapter
     */
    private static void demonstrateAdapter() {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("üîå DEMONSTRANDO PADR√ÉO ADAPTER");
        System.out.println("=".repeat(60));
        
        // Cria o sistema legado
        LegacyPaymentSystem legacySystem = new LegacyPaymentSystem("MERCH001", "TERM001");
        
        // Cria o adapter
        ModernPaymentInterface modernInterface = new LegacyPaymentAdapter(legacySystem);
        
        // Cria dados de pagamento modernos
        ModernPaymentInterface.PaymentData paymentData = new ModernPaymentInterface.PaymentData(
            "9876-5432-1098-7654",
            "Pedro Oliveira",
            "06/26",
            "123",
            299.99,
            "BRL"
        );
        
        // Usa a interface moderna (que internamente usa o sistema legado)
        System.out.println("üí≥ Dados do pagamento:");
        System.out.println(paymentData.toString());
        
        boolean success = modernInterface.processPayment(paymentData);
        
        if (success) {
            System.out.println("üéâ Pagamento realizado com sucesso via interface moderna!");
        }
        
        // Verifica status
        String status = modernInterface.getStatus();
        System.out.println("üìä Status do sistema: " + status);
        
        // Cancela transa√ß√£o
        modernInterface.cancelTransaction("TXN123");
    }
}
